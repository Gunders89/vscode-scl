{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Siemens SCL",
	"patterns": [
		{ "include": "#comments"},
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#operators" },
		{ "include": "#storage"	},
		{ "include": "#constants" },
		{ "include": "#support"	},
		{ "include": "#punctuations" },
		{ "include": "#section" }

	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(break|case|end_case|continue|do|to|else|elsif|AT|for|end_for|goto|if|end_if|return|of|while|end_while|then|repeat|until|end_repeat|exit|label|end_label)\\b"
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(var|var_input|var_output|var_in_out|var_temp|end_var|begin|const|end_const|type|end_type)\\b"			
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(mod|div)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.control.scl",
					"match": "!|\\$|\\&|<\\=|>\\=|<>|<|>|(\\*\\*)|(\\=\\=)|!|\\&\\&|\\*|\\/|\\-|\\+|:|\\=|\\b(void)\\b"
				},
				{
					"name": "keyword.control.assignment.scl",
					"match": "\\:\\="
				},
				{
					"name": "keyword.control.scl",
					"match": "(?i)\\b(and|or|xor|not)\\b"
				}
			]

		},
						
		"storage": {
			"patterns": [
				{
					"captures": {
						"1": { "name": "storage.type.function.scl"},
						"2": { "name": "entity.name.function.scl"},
						"3": { "name": "entity.name.function.scl"},
						"7": { 
							"patterns": [
								{
									"include": "#operators"
								}
							]
						},
						"9": { 	
							"patterns": [
								{
									"include": "#support"
								}
							]
						}
					},
					"match": "(?i)\\b(function)\\s+(\"(\\w*)\")((|\\s*)((\\:)(\\s*|)(\\w*)(\\s))|)",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(?i)\\b(END_FUNCTION)\\b",
					"name": "storage.type.function.scl"
				},
				{
					"captures": {
						"1": { "name": "storage.type.function.scl"},
						"2": { "name": "entity.name.function.scl"},
						"3": { "name": "entity.name.function.scl"}
					},
					"match": "(?i)\\b(function_block)\\s+(\"(\\w*)\")?",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(?i)\\b(END_FUNCTION_BLOCK)\\b",
					"name": "storage.type.function.scl"
				},
				{
					"match": "(\"(\\w+?)\")",
					"name": "entity.name.function.scl"					
				}
			]	
		},
		"support":{
			"patterns": [
				{
					"match": "(?i)\\b(ANY|ARRAY|BOOL|BYTE|CHAR|COUNTER|DATE|DATE_AND_TIME|INT|DINT|DT|DWORD|POINTER|REAL|S5TIME|STRING|TIME|TIMER|TIME_OF_DAY|TOD|UINT|VOID|WORD|WSTRING)\\b",
					"name": "support.class.scl"
				},
				{
					"match": "(?i)\\b(STRUCT|END_STRUCT)\\b",
					"name": "support.type.scl"
				},
				{
					"match": "(?i)\\b(ABS|SQR|SQRT|EXP|EXPD|LN|LOG|ACOS|ASIN|ATAN|COS|SIN|TAN)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(ROL|ROR|SHL|SHR)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(SEL|MAX|MIN|LIMIT|MUX)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(ROUND|TRUNC)\\b",
					"name": "support.function.scl"
				},
				{
					"match": "(?i)\\b(S7_)\\w+",
					"name": "support.variable.scl"
				},
				{
					"match": "(?i)\\b(TIME_TCK)\\b",
					"name": "support.function.scl"
				},
				{
					"match":"(?i)\\b(bool_to_byte|bool_to_dword|bool_to_word|bool_to_int|bool_to_dint)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(byte_to_bool|byte_to_char|byte_to_dword|byte_to_int|byte_to_dint|byte_to_word)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(char_to_byte|char_to_int|char_to_string|char_to_wstring)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(date_to_dint)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(dint_to_date|dint_to_dword|dint_to_int|dint_to_time|dint_to_tod|dint_to_bool|dint_to_byte|dint_to_real|dint_to_string|dint_to_wstring|dint_to_word|dint_to_bcd|dint_to_bcd_dword)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(dword_to_bool|dword_to_byte|dword_to_dint|dword_to_real|dword_to_word|dword_to_int)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(int_to_char|int_to_word|int_to_byte|int_to_dint|int_to_dword|int_to_real|int_to_string|int_to_wstring|int_to_bcd|int_to_bcd_word)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(real_to_dint|real_to_dword|real_to_int|real_to_string|real_to_wstring)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(string_to_char|string_to_wchar|string_to_int|string_to_lint|string_to_uint|string_to_usint|string_to_dint|string_to_udint|string_to_real|string_lreal|string_to_wstring)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(wstring_to_char|wstring_to_wchar|wstring_to_int|wstring_to_lint|wstring_to_uint|wstring_to_usint|wstring_to_dint|wstring_to_udint|wstring_to_real|wstring_to_lreal|wstring_to_string)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(time_to_dint)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(tod_to_dint)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(word_to_bool|word_to_byte|word_to_int|word_to_dint|word_to_dword|word_to_block_db)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(block_db_to_word)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(bcd_to_int|bcd_to_dint)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(word_bcd_to_int)\\b",
					"name":"support.function.scl"
				},
				{
					"match":"(?i)\\b(dword_bcd_to_dint)\\b",
					"name":"support.function.scl"
				}
			]
		},
		"constants":{
			"patterns": [
				{
					"match": "\\b(T|TIME)#(((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?d)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?h)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?m)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?s)?((([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)|\\d+)?ms)?)\\b",	
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b(16)#[0-9A-F]([0-9A-F]|\\_)+\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b(2)#[0-1]([0-1]|\\_)+\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
					"name": "constant.numeric.scl"					
				},
				{
					"match": "(?i)\\btrue\\b",
					"name": "constant.language.boolean.true.scl"					
				},
				{
					"match": "(?i)\\bfalse\\b",
					"name": "constant.language.boolean.false.scl"					
				}
			]
		},
		"punctuations":{
			"patterns": [
				{
					"match": "\\;",
					"name": "punctuation.terminator.statement.scl"	
				}
			]
		},
		"comments":{
			"patterns": [
				{
					"captures": {
						"0": { "name": "punctuation.definition.comment.scl"}
					},
					"begin": "\\(\\*",
					"end": "\\*\\)",
					"name": "comment.block.scl"
				},
				{
					"captures": {
						"1": { "name": "punctuation.definition.comment.scl"}
					},
					"match": "(//).*$\\n?",
					"name": "comment.line.double-slash.scl"
				}
			]
		},
		"section":{
			"patterns":[
				{
					"match": "(?i)\\b(region|end_region)\\b",
					"name": "entity.name.section.scl"					
				}
			]
		},
		"strings": {
			"name": "string.quoted.single.scl",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.scl",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.scl"
}